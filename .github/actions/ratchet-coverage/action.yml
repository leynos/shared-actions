name: Ratchet coverage
description: Run cargo tarpaulin and fail if coverage decreases
inputs:
  baseline-file:
    description: Path to store the coverage baseline
    required: false
    default: .coverage-baseline
  args:
    description: Additional arguments passed to cargo tarpaulin
    required: false
    default: ''
outputs:
  percent:
    description: Coverage percentage reported by cargo tarpaulin
    value: ${{ steps.cov.outputs.percent }}
runs:
  using: composite
  steps:
    - if: runner.os != 'Linux'
      run: echo "Skipping ratchet coverage: cargo tarpaulin only runs on Linux"
      shell: bash
    - name: Restore baseline
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: ${{ inputs.baseline-file }}
        key: ratchet-baseline-${{ runner.os }}
    - name: Cache cargo artifacts
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/cargo-tarpaulin
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-tarpaulin-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-tarpaulin-
    - name: Install cargo-tarpaulin
      if: runner.os == 'Linux'
      run: cargo install cargo-tarpaulin
      shell: bash
    - if: runner.os == 'Windows'
      name: Install bc (MSYS2)
      uses: msys2/setup-msys2@v2
      with:
        install: bc
        path-type: inherit
    - name: Run coverage
      if: runner.os == 'Linux'
      id: cov
      run: |
        set -euo pipefail
        output=$(cargo tarpaulin --out lcov ${{ inputs.args }})
        echo "$output"
        percent=$(echo "$output" | grep -oE '[0-9]+(\.[0-9]+)?(?=%)' | head -n1)
        echo "percent=$percent" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Ratchet coverage
      if: runner.os == 'Linux'
      run: |
        set -euo pipefail
        file="${{ inputs.baseline-file }}"
        current="${{ steps.cov.outputs.percent }}"
        baseline=0
        if [ -f "$file" ]; then
          baseline=$(cat "$file")
        fi
        echo "Current coverage: $current%"
        echo "Baseline coverage: $baseline%"

        if ! echo "$current" | grep -Eq '^[0-9]+(\.[0-9]+)?$'; then
          echo "Invalid coverage value: $current" >&2
          exit 1
        fi
        if ! echo "$baseline" | grep -Eq '^[0-9]+(\.[0-9]+)?$'; then
          baseline=0
        fi

        if (( $(bc -l <<<"$current < $baseline") )); then
          echo "Coverage decreased" >&2
          exit 1
        fi

        mkdir -p "$(dirname "$file")"
        printf '%.2f' "$current" > "$file"
      shell: bash
    - name: Save baseline
      if: success() && runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: ${{ inputs.baseline-file }}
        key: ratchet-baseline-${{ runner.os }}
