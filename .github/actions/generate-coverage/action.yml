name: Generate coverage
description: Run test coverage for Rust and Python projects
inputs:
  features:
    description: Cargo features to enable
    required: false
  with-default-features:
    description: Enable default features
    required: false
    type: boolean
    default: true
  output-path:
    description: Output file path
    required: true
  format:
    description: Coverage format
    required: false
    default: cobertura
outputs:
  file:
    description: Path to the generated coverage file
    value: ${{ steps.out.outputs.file }}
  format:
    description: Format of the coverage file
    value: ${{ steps.out.outputs.format }}
  lang:
    description: Detected project language
    value: ${{ steps.detect.outputs.lang }}
runs:
  using: composite
  steps:
    - id: detect
      run: |
        set -euo pipefail
        has_rust=0
        has_python=0
        [[ -f Cargo.toml ]] && has_rust=1
        [[ -f pyproject.toml ]] && has_python=1

        if [[ $has_rust -eq 1 && $has_python -eq 1 ]]; then
          lang=mixed
        elif [[ $has_rust -eq 1 ]]; then
          lang=rust
        elif [[ $has_python -eq 1 ]]; then
          lang=python
        else
          echo "Neither Cargo.toml nor pyproject.toml found" >&2
          exit 1
        fi

        case "${{ inputs.format }}" in
          lcov|cobertura|coveragepy) ;;
          *)
            echo "Unsupported format: ${{ inputs.format }}" >&2
            exit 1
            ;;
        esac

        if [[ "$lang" == 'rust' && "${{ inputs.format }}" == 'coveragepy' ]]; then
          echo "coveragepy format only supported for Python projects" >&2
          exit 1
        fi
        if [[ "$lang" == 'python' && "${{ inputs.format }}" == 'lcov' ]]; then
          echo "lcov format only supported for Rust projects" >&2
          exit 1
        fi
        if [[ "$lang" == 'mixed' && "${{ inputs.format }}" != 'cobertura' ]]; then
          echo "Mixed projects only support cobertura format" >&2
          exit 1
        fi

        echo "lang=$lang" >> "$GITHUB_OUTPUT"
      shell: bash
    - id: rust
      if: steps.detect.outputs.lang == 'rust' || steps.detect.outputs.lang == 'mixed'
      run: |
        set -euo pipefail
        out="${{ inputs.output-path }}"
        if [[ "${{ steps.detect.outputs.lang }}" == 'mixed' ]]; then
          out="${{ inputs.output-path }}.rust.xml"
        fi
        args=(--workspace)
        if [[ "${{ inputs.with-default-features }}" == "false" ]]; then
          args+=(--no-default-features)
        fi
        if [ -n "${{ inputs.features }}" ]; then
          args+=(--features "${{ inputs.features }}")
        fi
        args+=(--${{ inputs.format }})
        args+=(--output-path "$out")
        cargo llvm-cov "${args[@]}"
        echo "file=$out" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Install uv and set the python version
      if: steps.detect.outputs.lang == 'python' || steps.detect.outputs.lang == 'mixed'
      uses: astral-sh/setup-uv@v5

    - name: Cache Python deps
      if: steps.detect.outputs.lang == 'python' || steps.detect.outputs.lang == 'mixed'
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-py-deps-${{ hashfiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py-deps-

    - name: Install slipcover and pytest
      if: steps.detect.outputs.lang == 'python' || steps.detect.outputs.lang == 'mixed'
      run: uv pip install --system slipcover pytest
      shell: bash

    - id: python
      if: steps.detect.outputs.lang == 'python' || steps.detect.outputs.lang == 'mixed'
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "${{ inputs.output-path }}")"
        out="${{ inputs.output-path }}"
        if [[ "${{ steps.detect.outputs.lang }}" == 'mixed' ]]; then
          out="${{ inputs.output-path }}.python.xml"
        fi
        case "${{ inputs.format }}" in
          cobertura)
            python -m slipcover \
              --branch \
              --xml "$out" \
              -m pytest -v
            ;;
          coveragepy)
            python -m slipcover \
              --branch \
              -m pytest -v
            mv .coverage "$out"
            ;;
        esac
        echo "file=$out" >> "$GITHUB_OUTPUT"
      shell: bash
    - if: steps.detect.outputs.lang == 'mixed'
      run: |
        set -euo pipefail
        uvx merge-cobertura "${{ steps.rust.outputs.file }}" "${{ steps.python.outputs.file }}" > "${{ inputs.output-path }}"
      shell: bash
    - id: out
      run: |
        echo "file=${{ inputs.output-path }}" >> "$GITHUB_OUTPUT"
        echo "format=${{ inputs.format }}" >> "$GITHUB_OUTPUT"
      shell: bash
