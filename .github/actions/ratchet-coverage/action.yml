name: Ratchet coverage
description: Run cargo tarpaulin and fail if coverage decreases
inputs:
  baseline-file:
    description: Path to store the coverage baseline
    required: false
    default: .coverage-baseline
  args:
    description: Additional arguments passed to cargo tarpaulin
    required: false
    default: ''
outputs:
  percent:
    description: Coverage percentage reported by cargo tarpaulin
    value: ${{ steps.cov.outputs.percent }}
runs:
  using: composite
  steps:
    - name: Restore baseline
      uses: actions/cache@v4
      with:
        path: ${{ inputs.baseline-file }}
        key: ratchet-baseline-${{ runner.os }}-${{ github.ref_name }}
    - name: Cache cargo artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/cargo-tarpaulin
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-tarpaulin-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-tarpaulin-
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      shell: bash
    - name: Run coverage
      id: cov
      run: |
        set -euo pipefail
        output=$(cargo tarpaulin ${{ inputs.args }} --out lcov 2>&1)
        echo "$output"
        percent=$(echo "$output" | grep -oP '[0-9]+(?:\.[0-9]+)?(?=%)' | head -n1)
        if [ -z "$percent" ]; then
          echo "Unable to extract coverage percentage" >&2
          exit 1
        fi
        echo "percent=$percent" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Ratchet coverage
      run: |
        set -euo pipefail
        file="${{ inputs.baseline-file }}"
        current="${{ steps.cov.outputs.percent }}"
        baseline=0
        if [ -f "$file" ]; then
          baseline=$(cat "$file")
        fi
        echo "Current coverage: $current%"
        echo "Baseline coverage: $baseline%"
        if ! [[ "$current" =~ ^[0-9]+(\.[0-9]+)?$ ]] || \
           ! [[ "$baseline" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          echo "Invalid coverage values" >&2
          exit 1
        fi
        # Ensure we're on Linux where `bc` is guaranteed to be installed
        if [[ "$RUNNER_OS" != "Linux" ]]; then
          echo "This action only supports Linux runners for float comparisons." >&2
          exit 1
        fi

        if [ "$(echo "$current < $baseline" | bc -l)" = "1" ]; then
          echo "Coverage decreased" >&2
          exit 1
        fi
        printf '%.2f' "$current" > "$file"
      shell: bash
    - name: Save baseline
      if: success()
      uses: actions/cache@v4
      with:
        path: ${{ inputs.baseline-file }}
        key: ratchet-baseline-${{ runner.os }}-${{ github.ref_name }}
