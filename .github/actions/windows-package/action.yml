name: Windows package
description: Build a WiX v4 MSI from prebuilt application assets on Windows runners
inputs:
  wxs-path:
    description: Path to the WiX authoring (.wxs) file that defines the installer.
    required: false
    default: installer/Package.wxs
  architecture:
    description: Target architecture passed to `wix build` (for example `x64` or `x86`).
    required: false
    default: x64
  version:
    description: >
      Version string to embed in the MSI. If omitted the action strips a leading
      `v` from `GITHUB_REF_NAME` and falls back to `0.0.0` when no tag is
      available.
    required: false
  dotnet-version:
    description: The .NET SDK version installed before invoking the WiX CLI.
    required: false
    default: 8.0.x
  wix-tool-version:
    description: Optional version constraint for the `wix` .NET global tool.
    required: false
  wix-extension:
    description: WiX extension to install and load during the build.
    required: false
    default: WixToolset.UI.wixext
  wix-extension-version:
    description: Version of the WiX extension to install via `wix extension add`.
    required: false
    default: '4'
  output-basename:
    description: Base filename for the generated MSI without extension.
    required: false
    default: MyApp
  output-directory:
    description: Directory where the MSI will be written.
    required: false
    default: out
  upload-artifact:
    description: Upload the generated MSI with `actions/upload-artifact`.
    required: false
    default: 'true'
  artifact-name:
    description: Artifact name when `upload-artifact` is enabled.
    required: false
    default: msi
outputs:
  version:
    description: Version string resolved for the MSI build.
    value: ${{ steps.resolve-version.outputs.version }}
  msi-path:
    description: Absolute path to the generated MSI file.
    value: ${{ steps.build-msi.outputs.msi-path }}
runs:
  using: composite
  steps:
    - name: Ensure Windows runner
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -ne 'Windows') {
          Write-Error "windows-package action must run on a Windows runner. Current OS: $($env:RUNNER_OS)"
          exit 1
        }
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
    - name: Install WiX CLI and extensions
      shell: pwsh
      env:
        WIX_TOOL_VERSION: ${{ inputs.wix-tool-version }}
        WIX_EXTENSION: ${{ inputs.wix-extension }}
        WIX_EXTENSION_VERSION: ${{ inputs.wix-extension-version }}
      run: |
        $ErrorActionPreference = 'Stop'
        $toolVersion = $env:WIX_TOOL_VERSION
        if ([string]::IsNullOrWhiteSpace($toolVersion)) {
          dotnet tool install --global wix
        }
        else {
          dotnet tool install --global wix --version $toolVersion
        }
        if (-not [string]::IsNullOrWhiteSpace($env:WIX_EXTENSION)) {
          $extensionCoordinate = $env:WIX_EXTENSION
          if (-not [string]::IsNullOrWhiteSpace($env:WIX_EXTENSION_VERSION)) {
            $extensionCoordinate = "$extensionCoordinate/$($env:WIX_EXTENSION_VERSION)"
          }
          wix extension add -g $extensionCoordinate
        }
    - id: resolve-version
      name: Resolve package version
      shell: pwsh
      env:
        INPUT_VERSION: ${{ inputs.version }}
      run: |
        $ErrorActionPreference = 'Stop'
        $version = $env:INPUT_VERSION
        if ([string]::IsNullOrWhiteSpace($version)) {
          $refName = $env:GITHUB_REF_NAME
          if (-not [string]::IsNullOrWhiteSpace($refName)) {
            $version = $refName -replace '^v', ''
          }
        }
        if ([string]::IsNullOrWhiteSpace($version)) {
          $version = '0.0.0'
        }
        Write-Host "Resolved version: $version"
        "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
    - id: build-msi
      name: Build MSI
      shell: pwsh
      env:
        WXS_PATH: ${{ inputs.wxs-path }}
        ARCHITECTURE: ${{ inputs.architecture }}
        OUTPUT_BASENAME: ${{ inputs.output-basename }}
        OUTPUT_DIRECTORY: ${{ inputs.output-directory }}
        VERSION: ${{ steps.resolve-version.outputs.version }}
        WIX_EXTENSION: ${{ inputs.wix-extension }}
      run: |
        $ErrorActionPreference = 'Stop'
        if (-not (Test-Path -LiteralPath $env:WXS_PATH)) {
          Write-Error "WiX source file not found: $env:WXS_PATH"
          exit 1
        }
        $outDir = $env:OUTPUT_DIRECTORY
        if (Test-Path -LiteralPath $outDir) {
          $outDirItem = Get-Item -LiteralPath $outDir
        }
        else {
          $outDirItem = New-Item -ItemType Directory -Path $outDir
        }
        $outputPath = Join-Path -Path $outDirItem.FullName -ChildPath ("{0}-{1}-{2}.msi" -f $env:OUTPUT_BASENAME, $env:VERSION, $env:ARCHITECTURE)
        $arguments = @('build', $env:WXS_PATH)
        if (-not [string]::IsNullOrWhiteSpace($env:WIX_EXTENSION)) {
          $arguments += @('-ext', $env:WIX_EXTENSION)
        }
        $arguments += @('-arch', $env:ARCHITECTURE, "-dVersion=$($env:VERSION)", '-o', $outputPath)
        wix @arguments
        $resolved = (Resolve-Path -LiteralPath $outputPath).Path
        "msi-path=$resolved" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
    - name: Upload MSI artifact
      if: ${{ inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ steps.build-msi.outputs.msi-path }}
branding:
  icon: package
  color: blue
