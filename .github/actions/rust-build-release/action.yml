name: Rust Build Release
description: Build Rust project in release mode for a given target
inputs:
  target:
    description: Target triple to build
    default: x86_64-unknown-linux-gnu
  project-dir:
    description: Path to the Rust project to build
    required: false
    default: .
  bin-name:
    description: Name of the binary to stage and package
    required: false
    default: rust-toy-app
  formats:
    description: Comma-separated package formats to produce
    required: false
    default: deb
  version:
    description: Package version (e.g. 0.1.0)
    required: true
runs:
  using: composite
  steps:
    - name: Setup uv
      # v6.6.1
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
    - name: Validate target
      shell: bash
      run: |
        set -euo pipefail
        uv run --script "$GITHUB_ACTION_PATH/src/action_setup.py" \
          validate "${{ inputs.target }}"
    - name: Determine toolchain
      shell: bash
      run: |
        set -euo pipefail
        TOOLCHAIN="$(uv run --script "$GITHUB_ACTION_PATH/src/action_setup.py" \
          toolchain \
          --target "${{ inputs.target }}" \
          --runner-os "${{ runner.os }}" \
          --runner-arch "${{ runner.arch }}")"
        echo "RBR_TOOLCHAIN=$TOOLCHAIN" >> "$GITHUB_ENV"
    - name: Setup Rust toolchain
      uses: leynos/shared-actions/.github/actions/setup-rust@f9f1c863c8a5bef64aa6779caa746e1a4a6c1ad4
      with:
        toolchain: ${{ env.RBR_TOOLCHAIN }}
    - name: Cache cargo
      uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
      with:
        toolchain: ${{ env.RBR_TOOLCHAIN }}
        workspaces: ${{ inputs.project-dir }}
        shared-key: ${{ runner.os }}-toolchain-${{ env.RBR_TOOLCHAIN }}
        cache-on-failure: true
    - name: Build release
      shell: bash
      env:
        RBR_TARGET: ${{ inputs.target }}
        RBR_TOOLCHAIN: ${{ env.RBR_TOOLCHAIN }}
      working-directory: ${{ inputs.project-dir }}
      run: |
        set -euo pipefail
        uv run --script "$GITHUB_ACTION_PATH/src/main.py"
    - id: stage-linux-artifacts
      name: Stage artifacts
      if: contains(inputs.target, 'unknown-linux-')
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: |
        set -euo pipefail
        case "${{ inputs.target }}" in
          x86_64-unknown-linux-*)
            os=linux
            arch=amd64
            ;;
          aarch64-unknown-linux-*)
            os=linux
            arch=arm64
            ;;
          i686-unknown-linux-*)
            os=linux
            arch=i386
            ;;
          armv7-unknown-linux-gnueabihf|arm-unknown-linux-gnueabihf|armv7-unknown-linux-musleabihf|arm-unknown-linux-musleabihf)
            os=linux
            arch=armhf
            ;;
          riscv64*-unknown-linux-*)
            os=linux
            arch=riscv64
            ;;
          *)
            echo "::error:: unsupported target ${{ inputs.target }}"
            exit 1
            ;;
        esac
        mkdir -p "dist/${{ inputs.bin-name }}_${os}_${arch}"
        bin_src="target/${{ inputs.target }}/release/${{ inputs.bin-name }}"
        if [[ ! -f "${bin_src}" ]]; then
          echo "::error:: binary not found at ${bin_src}"
          exit 1
        fi
        mapfile -d '' -t man_matches < <(
          find "target/${{ inputs.target }}/release/build" \
            -path "*/out/${{ inputs.bin-name }}.1" \
            -type f -print0
        )
        if [[ ${#man_matches[@]} -eq 0 ]]; then
          echo "::error:: man page not found under target/${{ inputs.target }}/release/build/*/out/"
          exit 1
        fi
        if [[ ${#man_matches[@]} -gt 1 ]]; then
          echo "::error:: expected exactly one man page, found ${#man_matches[@]}"
          for match in "${man_matches[@]}"; do
            echo "::error::   ${match}"
          done
          exit 1
        fi
        man_path="${man_matches[0]}"
        if [[ ! -f "${man_path}" ]]; then
          echo "::error:: located man page ${man_path} is not a file"
          exit 1
        fi
        install -m 0755 "${bin_src}" "dist/${{ inputs.bin-name }}_${os}_${arch}/${{ inputs.bin-name }}"
        install -m 0644 "${man_path}" "dist/${{ inputs.bin-name }}_${os}_${arch}/${{ inputs.bin-name }}.1"
        echo "man-path=dist/${{ inputs.bin-name }}_${os}_${arch}/${{ inputs.bin-name }}.1" >> "${GITHUB_OUTPUT}"
    - name: Package Linux artifacts
      if: contains(inputs.target, 'unknown-linux-')
      uses: ./.github/actions/linux-packages
      with:
        project-dir: ${{ inputs.project-dir }}
        bin-name: ${{ inputs.bin-name }}
        package-name: ${{ inputs.bin-name }}
        target: ${{ inputs.target }}
        version: ${{ inputs.version }}
        formats: ${{ inputs.formats }}
        man-paths: ${{ steps.stage-linux-artifacts.outputs.man-path }}
