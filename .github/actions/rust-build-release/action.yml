name: Rust Build Release
description: Build Rust project in release mode for a given target
inputs:
  target:
    description: Target triple to build
    default: x86_64-unknown-linux-gnu
  project-dir:
    description: Path to the Rust project to build
    required: false
    default: .
runs:
  using: composite
  steps:
    - name: Setup uv
      # v6.6.1
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
    - name: Setup Rust toolchain
      uses: leynos/shared-actions/.github/actions/setup-rust@f9f1c863c8a5bef64aa6779caa746e1a4a6c1ad4
      with:
        toolchain: 1.89.0
    - name: Build release
      shell: bash
      env:
        RBR_TARGET: ${{ inputs.target }}
        RBR_TOOLCHAIN: 1.89.0
      working-directory: ${{ inputs.project-dir }}
      run: ${{ github.action_path }}/src/main.py
    - name: Stage artifacts
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: |
        set -euo pipefail
        case "${{ inputs.target }}" in
          x86_64-unknown-linux-gnu)
            os=linux
            arch=amd64
            ;;
          aarch64-unknown-linux-gnu)
            os=linux
            arch=arm64
            ;;
          *)
            echo "::error:: unsupported target ${{ inputs.target }}"
            exit 1
            ;;
        esac
        mkdir -p "dist/rust-toy-app_${os}_${arch}"
        cp "target/${{ inputs.target }}/release/rust-toy-app" "dist/rust-toy-app_${os}_${arch}/"
        man_path=$(find "target/${{ inputs.target }}/release/build" -path "*/out/rust-toy-app.1" -print -quit)
        cp "${man_path}" "dist/rust-toy-app_${os}_${arch}/"
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a
      with:
        version: "~> 2"
        workdir: ${{ inputs.project-dir }}
        args: release --clean --skip=publish --snapshot
      env:
        GORELEASER_CURRENT_TAG: v0.1.0
