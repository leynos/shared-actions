name: Rust Build Release
description: Build Rust project in release mode for a given target
inputs:
  target:
    description: Target triple to build
    default: x86_64-unknown-linux-gnu
  project-dir:
    description: Path to the Rust project to build
    required: false
    default: .
  version:
    description: Package version (e.g. 0.1.0)
    required: true
runs:
  using: composite
  steps:
    - name: Setup uv
      # v6.6.1
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
    - name: Setup Rust toolchain
      uses: leynos/shared-actions/.github/actions/setup-rust@f9f1c863c8a5bef64aa6779caa746e1a4a6c1ad4
      with:
        toolchain: 1.89.0
    - name: Cache cargo
      uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
      with:
        workspaces: ${{ inputs.project-dir }}
    - name: Build release
      shell: bash
      env:
        RBR_TARGET: ${{ inputs.target }}
        RBR_TOOLCHAIN: 1.89.0
      working-directory: ${{ inputs.project-dir }}
      run: ${{ github.action_path }}/src/main.py
    - name: Install nfpm
      shell: bash
      run: |
        set -euo pipefail
        ver="v2.39.0"
        arch="$(uname -m)"
        case "$arch" in
          x86_64) asset_arch="x86_64" ;;
          aarch64) asset_arch="arm64" ;;
          *) asset_arch="x86_64" ;;
        esac
        curl -sSL "https://github.com/goreleaser/nfpm/releases/download/${ver}/nfpm_${ver#v}_Linux_${asset_arch}.tar.gz" -o nfpm.tgz
        tar -xzf nfpm.tgz nfpm
        install -m 0755 nfpm "${RUNNER_TEMP}/nfpm"
        echo "${RUNNER_TEMP}" >> "${GITHUB_PATH}"
    - name: Stage artifacts
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: |
        set -euo pipefail
        case "${{ inputs.target }}" in
          x86_64-unknown-linux-gnu)
            os=linux
            arch=amd64
            ;;
          aarch64-unknown-linux-gnu)
            os=linux
            arch=arm64
            ;;
          *)
            echo "::error:: unsupported target ${{ inputs.target }}"
            exit 1
            ;;
        esac
        mkdir -p "dist/rust-toy-app_${os}_${arch}"
        bin_src="target/${{ inputs.target }}/release/rust-toy-app"
        if [[ ! -f "${bin_src}" ]]; then
          echo "::error:: binary not found at ${bin_src}"
          exit 1
        fi
        mapfile -t man_matches < <(find "target/${{ inputs.target }}/release/build" -path "*/out/rust-toy-app.1" -print)
        if [[ ${#man_matches[@]} -eq 0 ]]; then
          echo "::error:: man page not found under target/${{ inputs.target }}/release/build/*/out/"
          exit 1
        fi
        if [[ ${#man_matches[@]} -gt 1 ]]; then
          echo "::error:: expected exactly one man page, found ${#man_matches[@]}"
          exit 1
        fi
        man_path="${man_matches[0]}"
        if [[ ! -f "${man_path}" ]]; then
          echo "::error:: located man page ${man_path} is not a file"
          exit 1
        fi
        install -Dm755 "${bin_src}" "dist/rust-toy-app_${os}_${arch}/rust-toy-app"
        install -Dm644 "${man_path}" "dist/rust-toy-app_${os}_${arch}/rust-toy-app.1"
    - name: Package with nfpm
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: |
        set -euo pipefail
        case "${{ inputs.target }}" in
          x86_64-unknown-linux-gnu)
            arch=amd64
            ;;
          aarch64-unknown-linux-gnu)
            arch=arm64
            ;;
          *)
            echo "::error:: unsupported target ${{ inputs.target }}"
            exit 1
            ;;
        esac
        man_path="dist/rust-toy-app_linux_${arch}/rust-toy-app.1"
        if [[ ! -f "${man_path}" ]]; then
          echo "::error:: missing man page ${man_path}"
          exit 1
        fi
        uv run "${{ github.action_path }}/scripts/package.py" \
          --name rust-toy-app \
          --bin-name rust-toy-app \
          --target "${{ inputs.target }}" \
          --version "${{ inputs.version }}" \
          --formats "deb" \
          --man "${man_path}"
