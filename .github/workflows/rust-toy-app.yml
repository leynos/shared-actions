name: rust-toy-app
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
jobs:
  build-release:
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # - runner: ubuntu-latest
          #   target: x86_64-unknown-freebsd # TODO: re-introduce when implemented
          # - runner: ubuntu-latest
          #   target: aarch64-unknown-freebsd # TODO: re-introduce when implemented
          # - runner: ubuntu-latest
          #   target: x86_64-unknown-openbsd # TODO: re-introduce when implemented
          # - runner: ubuntu-latest
          #   target: aarch64-unknown-openbsd # TODO: re-introduce when implemented
          # - runner: macos-latest
          #   target: x86_64-apple-darwin # TODO: re-introduce when implemented
          # - runner: macos-latest
          #   target: aarch64-apple-darwin # TODO: re-introduce when implemented
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
          - runner: windows-latest
            target: aarch64-pc-windows-gnu
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set llvm-mingw metadata
        if: matrix.runner == 'windows-latest'
        shell: pwsh
        run: |
          "LLVM_MINGW_VERSION=20250910" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "LLVM_MINGW_SHA256=bd88084d7a3b95906fa295453399015a1fdd7b90a38baa8f78244bd234303737" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Configure Windows GNU toolchains
        if: matrix.runner == 'windows-latest'
        uses: ./.github/actions/setup-windows-gnu
        with:
          llvm-mingw-version: ${{ env.LLVM_MINGW_VERSION }}
          llvm-mingw-sha256: ${{ env.LLVM_MINGW_SHA256 }}
      - name: Build
        if: runner.os != 'Windows'
        uses: ./.github/actions/rust-build-release
        with:
          target: ${{ matrix.target }}
          project-dir: rust-toy-app
      - name: Setup uv
        if: runner.os == 'Windows'
        uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
      - name: Validate Windows target
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          uv run --script .github/actions/rust-build-release/src/action_setup.py \
            validate "${{ matrix.target }}"
      - name: Resolve Rust toolchain
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          toolchain="$(uv run --script .github/actions/rust-build-release/src/action_setup.py \
            toolchain \
            --target "${{ matrix.target }}" \
            --runner-os "${{ runner.os }}" \
            --runner-arch "${{ runner.arch }}")"
          echo "RBR_TOOLCHAIN=$toolchain" >> "$GITHUB_ENV"
      - name: Setup Rust toolchain
        if: runner.os == 'Windows'
        uses: actions-rust-lang/setup-rust-toolchain@9d7e65c320fdb52dcd45ffaa68deb6c02c8754d9
        with:
          toolchain: ${{ env.RBR_TOOLCHAIN }}
          override: true
          components: rustfmt, clippy, llvm-tools-preview
      - name: Add Rust target
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          rustup target add --toolchain "${{ env.RBR_TOOLCHAIN }}" "${{ matrix.target }}"
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: bash
        working-directory: rust-toy-app
        env:
          RBR_TARGET: ${{ matrix.target }}
          RBR_TOOLCHAIN: ${{ env.RBR_TOOLCHAIN }}
        run: |
          set -euo pipefail
          uv run --script ../.github/actions/rust-build-release/src/main.py
      - name: Verify artifacts
        run: |
          set -euo pipefail
          bin=rust-toy-app
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            bin=rust-toy-app.exe
          fi
          path="target/${{ matrix.target }}/release/$bin"
          echo "Verifying binary at: $path"
          test -f "$path"
          shopt -s nullglob
          manpages=(target/${{ matrix.target }}/release/build/rust-toy-app-*/out/rust-toy-app.1)
          (( "${#manpages[@]}" > 0 ))
        working-directory: rust-toy-app
        shell: bash
