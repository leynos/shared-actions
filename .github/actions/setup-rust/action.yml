name: Setup Rust
description: Install Rust and cache cargo registry
inputs:
  install-postgres-deps:
    description: Install PostgreSQL system dependencies
    required: false
    default: "false"
  install-sqlite-deps:
    description: Install SQLite development libraries on Windows
    required: false
    default: "false"
  use-sccache:
    description: Enable sccache for non-release runs
    required: false
    default: "true"
  sccache-action-version:
    description: Version tag for mozilla-actions/sccache-action
    required: false
    default: "v0.0.10"
  with-darwin:
    description: Install macOS cross build toolchain
    required: false
    default: 'false'
  darwin-sdk-version:
    description: macOS SDK version for osxcross
    required: false
    default: '12.3'
  with-openbsd:
    description: Build OpenBSD std library for cross-compilation
    required: false
    default: 'false'
  openbsd-nightly:
    description: Nightly toolchain version for OpenBSD build
    required: false
    default: 'nightly-2025-07-20'
runs:
  using: composite
  steps:
    - name: Install rust
      uses: actions-rust-lang/setup-rust-toolchain@9d7e65c320fdb52dcd45ffaa68deb6c02c8754d9
      with:
        override: true
        components: rustfmt, clippy, llvm-tools-preview
    - name: Install uv
      # v6.4.3
      uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc
    - name: Install nightly toolchain (needed for OpenBSD cross-compilation)
      if: ${{ inputs.with-openbsd == 'true' && runner.os == 'Linux' }}
      run: |
        set -euo pipefail
        OPENBSD_NIGHTLY='${{ inputs.openbsd-nightly }}'
        NIGHTLY_DATE="${OPENBSD_NIGHTLY#nightly-}"
        curl -fsI "https://static.rust-lang.org/dist/${NIGHTLY_DATE}/channel-rust-nightly.toml" >/dev/null
        rustup toolchain install --profile minimal "$OPENBSD_NIGHTLY"
        echo "OPENBSD_NIGHTLY=$OPENBSD_NIGHTLY" >> "$GITHUB_ENV"
        echo "NIGHTLY_SYSROOT=$(rustc +$OPENBSD_NIGHTLY --print sysroot)" >> "$GITHUB_ENV"
      shell: bash
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/${{ env.BUILD_PROFILE }}
        key: ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-${{ hashFiles('rust-toolchain.toml', '**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-
    - name: Run sccache only on non-release runs
      if: ${{ inputs.use-sccache == 'true' && github.event_name != 'release' }}
      uses: mozilla-actions/sccache-action@${{ inputs.sccache-action-version }}
    - name: Install system dependencies
      if: ${{ inputs.install-postgres-deps == 'true' && runner.os == 'Linux' }}
      run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libpq-dev
      shell: bash
    - name: Install libpq (headers + import library)
      if: ${{ inputs.install-postgres-deps == 'true' && runner.os == 'Windows' }}
      shell: pwsh
      run: |
        # Install PostgreSQL 17 but suppress the server service â€“ we only need the client bits
        choco install postgresql17 --no-progress -y --params '/Password:postgres /NoService /SkipStackBuilder'

        # Tell the rest of the job where the headers and import library are
        $pgRoot = "${Env:ProgramFiles}\PostgreSQL\17"
        "PG_INCLUDE=$pgRoot\include" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        "PG_LIB=$pgRoot\lib"         | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "$pgRoot\bin"           | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install MSYS2 toolchain and SQLite
      if: ${{ inputs.install-sqlite-deps == 'true' && runner.os == 'Windows' }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-sqlite3
    - name: Setup osxcross (macOS SDK + linker)
      if: ${{ inputs.with-darwin == 'true' && runner.os == 'Linux' }}
      uses: mbround18/setup-osxcross@b26146d499c54979ed3d023266865dc188881911
      with:
        osx-version: ${{ inputs.darwin-sdk-version }}
    - name: Install Rust macOS targets
      if: ${{ inputs.with-darwin == 'true' && runner.os == 'Linux' }}
      run: rustup target add x86_64-apple-darwin aarch64-apple-darwin
      shell: bash
    - name: Cache OpenBSD stdlib
      if: ${{ inputs.with-openbsd == 'true' && runner.os == 'Linux' }}
      id: openbsd-stdlib-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.NIGHTLY_SYSROOT }}/lib/rustlib/x86_64-unknown-openbsd
        key: openbsd-stdlib-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}
    - name: Clone Rust repo & build OpenBSD std
      if: ${{ inputs.with-openbsd == 'true' && runner.os == 'Linux' && steps.openbsd-stdlib-cache.outputs.cache-hit != 'true' }}
      run: |
        git clone --depth 1 --single-branch https://github.com/rust-lang/rust.git
        cd rust
        HOST_TRIPLE=$(rustc -vV | grep '^host:' | awk '{print $2}')
        ./x.py build --stage 1 --target x86_64-unknown-openbsd library/std
        ARTIFACT_DIR="build/$HOST_TRIPLE/stage1/lib/rustlib/x86_64-unknown-openbsd"
        uv run --script "${{ github.action_path }}/scripts/copy_openbsd_stdlib.py" \
          "$ARTIFACT_DIR" "$NIGHTLY_SYSROOT"
      shell: bash
    - name: Add OpenBSD target
      if: ${{ inputs.with-openbsd == 'true' && runner.os == 'Linux' }}
      run: rustup target add x86_64-unknown-openbsd --toolchain ${{ env.OPENBSD_NIGHTLY }}
      shell: bash
