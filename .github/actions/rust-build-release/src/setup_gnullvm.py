#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# dependencies = ["typer"]
# ///
"""Set up the environment for building with the x86_64-pc-windows-gnullvm target."""

from __future__ import annotations

import os
import shutil
import sys
import tempfile
import urllib.request
import zipfile
from pathlib import Path

import typer

LLVM_MINGW_VERSION = "20240910"
TARGET = "x86_64-pc-windows-gnullvm"

app = typer.Typer(add_completion=False)


def set_env(name: str, value: str) -> None:
    """Write an environment variable to GITHUB_ENV for subsequent steps."""
    if github_env := os.environ.get("GITHUB_ENV"):
        with Path(github_env).open("a", encoding="utf-8") as f:
            f.write(f"{name}={value}\n")


def add_to_path(path: str) -> None:
    """Add a directory to GITHUB_PATH for subsequent steps."""
    if github_path := os.environ.get("GITHUB_PATH"):
        with Path(github_path).open("a", encoding="utf-8") as f:
            f.write(f"{path}\n")


def download_and_unzip(url: str, dest: Path) -> Path:
    """Download and extract *url* into *dest*, returning the extracted directory."""
    dest.mkdir(parents=True, exist_ok=True)
    zip_path = dest / Path(url).name
    typer.echo(f"Downloading {url} to {zip_path}...")
    with urllib.request.urlopen(url) as response, zip_path.open("wb") as out_file:  # noqa: S310
        shutil.copyfileobj(response, out_file)

    typer.echo(f"Extracting {zip_path} to {dest}...")
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        zip_ref.extractall(dest)

    # The archive extracts into a subdirectory, find it.
    extracted_dirs = [p for p in dest.iterdir() if p.is_dir()]
    if not extracted_dirs:
        msg = f"Zip file from {url} did not contain a directory."
        raise RuntimeError(msg)

    return extracted_dirs[0]


@app.command()
def main() -> None:
    """Orchestrate the setup for a gnullvm build on a Windows runner."""
    # This check is redundant if action.yml's 'if' condition is correct,
    # but provides a safe guard for direct execution.
    if sys.platform != "win32":
        typer.echo("Not a Windows runner, skipping gnullvm setup.")
        return

    typer.echo(f"Setting up for {TARGET} build on Windows...")

    # 1. Download and set up llvm-mingw
    runner_temp = Path(os.environ["RUNNER_TEMP"])
    final_llvm_path = runner_temp / "llvm-mingw-ucrt"
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            temp_path = Path(tmpdir)
            zip_file = f"llvm-mingw-{LLVM_MINGW_VERSION}-ucrt-x86_64.zip"
            url = f"https://github.com/mstorsjo/llvm-mingw/releases/download/{LLVM_MINGW_VERSION}/{zip_file}"
            extracted_path = download_and_unzip(url, temp_path)
            if final_llvm_path.exists():
                shutil.rmtree(final_llvm_path)
            shutil.move(str(extracted_path), str(final_llvm_path))
    except Exception as e:
        typer.echo(f"::error:: Failed to download or extract llvm-mingw: {e}", err=True)
        raise typer.Exit(1) from e

    llvm_bin_path = final_llvm_path / "bin"
    add_to_path(str(llvm_bin_path))
    typer.echo(f"Added {llvm_bin_path} to PATH.")

    # 2. Create .cargo/config.toml
    cargo_dir = Path.cwd() / ".cargo"
    cargo_dir.mkdir(exist_ok=True)
    config_toml_path = cargo_dir / "config.toml"
    config_content = f"""
# Automatically generated by rust-build-release action
[target.{TARGET}]
linker = "clang"
rustflags = ["-Clink-arg=-fuse-ld=lld"]
"""
    config_toml_path.write_text(config_content.strip(), encoding="utf-8")
    typer.echo(f"Created {config_toml_path} with linker configuration.")

    # 3. Set environment variables for cross and the cc crate
    set_env("CROSS_NO_DOCKER", "1")
    env_vars = {
        f"CC_{TARGET}": "clang",
        f"CXX_{TARGET}": "clang++",
        f"AR_{TARGET}": "llvm-ar",
        f"RANLIB_{TARGET}": "llvm-ranlib",
        f"CFLAGS_{TARGET}": "--target=x86_64-w64-windows-gnu",
        f"CXXFLAGS_{TARGET}": "--target=x86_64-w64-windows-gnu",
    }
    for key, value in env_vars.items():
        set_env(key, value)

    typer.echo("Set environment variables for gnullvm target.")
    typer.echo("gnullvm setup complete.")


if __name__ == "__main__":
    app()
