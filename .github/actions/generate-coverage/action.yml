name: Generate coverage
description: Run test coverage for Rust or Python projects
inputs:
  features:
    description: Cargo features to enable
    required: false
  with-default-features:
    description: Enable default features
    required: false
    default: true
  output-path:
    description: Output file path
    required: true
  format:
    description: Coverage format
    required: false
    default: cobertura
outputs:
  file:
    description: Path to the generated coverage file
    value: ${{ steps.out.outputs.file }}
  format:
    description: Format of the coverage file
    value: ${{ steps.out.outputs.format }}
runs:
  using: composite
  steps:
    - id: detect
      run: |
        set -euo pipefail
        if [[ -f Cargo.toml && -f pyproject.toml ]]; then
          echo "Found both Cargo.toml and pyproject.toml; not supported" >&2
          exit 1
        elif [ -f Cargo.toml ]; then
          echo "lang=rust" >> "$GITHUB_OUTPUT"
        elif [ -f pyproject.toml ]; then
          echo "lang=python" >> "$GITHUB_OUTPUT"
        else
          echo "Neither Cargo.toml nor pyproject.toml found" >&2
          exit 1
        fi
      shell: bash
    - if: steps.detect.outputs.lang == 'rust'
      run: |
        set -euo pipefail
        case "${{ inputs.format }}" in
          lcov|cobertura) ;;
          *)
            echo "Unsupported format: ${{ inputs.format }}" >&2
            exit 1
            ;;
        esac
        args=(--workspace)
        if [[ "${{ inputs.with-default-features }}" == "false" ]]; then
          args+=(--no-default-features)
        fi
        if [ -n "${{ inputs.features }}" ]; then
          args+=(--features "${{ inputs.features }}")
        fi
        args+=(--${{ inputs.format }})
        args+=(--output-path "${{ inputs.output-path }}")
        cargo llvm-cov "${args[@]}"
      shell: bash
    - name: Install uv and set the python version
      if: steps.detect.outputs.lang == 'python'
      uses: astral-sh/setup-uv@v5

    - name: Install slipcover and pytest
      if: steps.detect.outputs.lang == 'python'
      run: uv pip install --system slipcover pytest
      shell: bash

    - if: steps.detect.outputs.lang == 'python'
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "${{ inputs.output-path }}")"
        case "${{ inputs.format }}" in
          cobertura)
            python -m slipcover \
              --branch \
              --xml "${{ inputs.output-path }}" \
              -m pytest -v
            ;;
          coveragepy)
            python -m slipcover \
              --branch \
              -m pytest -v
            mv .coverage "${{ inputs.output-path }}"
            ;;
          *)
            echo "Unsupported format: ${{ inputs.format }}" >&2
            exit 1
            ;;
        esac
      shell: bash
    - id: out
      run: |
        echo "file=${{ inputs.output-path }}" >> "$GITHUB_OUTPUT"
        echo "format=${{ inputs.format }}" >> "$GITHUB_OUTPUT"
        echo "lang=${{ steps.detect.outputs.lang }}" >> "$GITHUB_OUTPUT"
      shell: bash
